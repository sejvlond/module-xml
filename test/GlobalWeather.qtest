#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

# make sure we have the right version of qore
%requires qore >= 0.8.12

%new-style
%require-types
%strict-args
%enable-all-warnings
%no-child-restrictions
%require-our

# test deprecated functions as well
%disable-warning deprecated

%requires QUnit
%requires ../qlib/WSDL.qm
%requires ../qlib/SoapClient.qm

%requires Util
%requires xml

%exec-class GlobalWeatherTest

class GlobalWeatherTest inherits QUnit::Test {

    private {
        const WsdlUrl = "file://" + normalize_dir(get_script_dir()) + "/globalweather.wsdl";

                WebService ws;

                const MyOpts = Opts + {};
        }

    constructor() : QUnit::Test("GlobalWeatherTest", "1.0", \ARGV, MyOpts) {
        ws = new WebService(WSDLLib::getFileFromURL(WsdlUrl));

        my hash svc = ws.getService("GlobalWeather");
        #my string port = "GlobalWeatherHttpGet";
        foreach my string port in (keys svc.port) {
            # add test cases
            addTestCase(sprintf("clientTest-%s", port), \clientTest(), (port));
                }
        # execute tests
        set_return_value(main());
    }

    clientTest(string port) {
                SoapClient sc(("wsdl": WsdlUrl, "port": port));
                hash h = sc.getInfo();
                printf("Info: %y\n", h);
                assertEq("GlobalWeather", h.service);
                assertEq(port, h.port);

        try {
            h = sc.callOperation("GetCitiesByCountry", ("CountryName": "Austria"), ("soapaction": ""));
        }
        catch (hash<ExceptionInfo> ex) {
            if (ex.desc =~ /Service Unavailable/)
                testSkip("Service Unavailable");
            rethrow;
        }
        hash data = parse_xml(h.firstValue());
        assertEq("NewDataSet", data.firstKey());
                #printf("Result: %N\n", data);

    }
}
